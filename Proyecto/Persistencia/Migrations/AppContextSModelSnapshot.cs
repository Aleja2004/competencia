// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proyecto.Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(AppContextS))]
    partial class AppContextSModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Proyecto.Dominio.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Proyecto.Dominio.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaInscripcion")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("Proyecto.Dominio.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("Proyecto.Dominio.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Persona");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Proyecto.Dominio.Estudiante", b =>
                {
                    b.HasBaseType("Proyecto.Dominio.Persona");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("InscripcionId")
                        .HasColumnType("int");

                    b.HasIndex("CursoId");

                    b.HasIndex("InscripcionId");

                    b.HasDiscriminator().HasValue("Estudiante");
                });

            modelBuilder.Entity("Proyecto.Dominio.Instructor", b =>
                {
                    b.HasBaseType("Proyecto.Dominio.Persona");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("Proyecto.Dominio.Materia", b =>
                {
                    b.HasOne("Proyecto.Dominio.Estudiante", null)
                        .WithMany("Materia")
                        .HasForeignKey("EstudianteId");

                    b.HasOne("Proyecto.Dominio.Instructor", null)
                        .WithMany("Materia")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("Proyecto.Dominio.Estudiante", b =>
                {
                    b.HasOne("Proyecto.Dominio.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto.Dominio.Inscripcion", "Inscripcion")
                        .WithMany()
                        .HasForeignKey("InscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("Proyecto.Dominio.Estudiante", b =>
                {
                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Proyecto.Dominio.Instructor", b =>
                {
                    b.Navigation("Materia");
                });
#pragma warning restore 612, 618
        }
    }
}
